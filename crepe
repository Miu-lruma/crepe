#!/usr/bin/env python3

#             crepe.py            #
#                                 #
#              Viice              #
#    Thursday, January 24, 2019   #
#             03:00 PM            #


#     Preprocessor Directives     #
import argparse
import configparser
import datetime
import os.path
import sys

#            Functions            #
# Creates file for c/c++/header files
def c(params):
    initLength(params)

    if params["overwrite_decoration"]:
        params["loud_char"] = params["quiet_char"]
    else:
        params["loud_char"] = "*"

    if not params["quiet_decoration"]:
        params["quiet_char"] = " "

    printstr = ""

    # Adds initial block
    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += cbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += cbegin(params)\
    + cbreak(params, line({"line": params["filename"], "length": params["length"], "quiet_char": " "}))\
    + cbreak(params, blank(params))\
    + cbreak(params, line({"line": params["name"], "length": params["length"], "quiet_char": " "}))\
    + cbreak(params, line({"line": params["datestring"], "length": params["length"], "quiet_char": " "}))

    # Will only add the current time if the option is selected
    if (params["display_time"]):
        printstr += cbreak(params, line({"line": params["timestring"], "length": params["length"], "quiet_char": " "}))

    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += cbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += cend(params)\
    + "\n\n"

    # Begins following blocks
    printstr += cbegin(params)\
    + cbreak(params, line({"line": "Preprocessor Directives", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)

    # Adds directives
    if params["display_code"]:
        # Adds definitions if header file
        if params["filetype"] in ["h", "x"]:
            printstr += "\n#ifndef "\
            + "_".join(params["filename"].rsplit(".")[:-1]).upper()\
            + "_H\n#define "\
            + "_".join(params["filename"].rsplit(".")[:-1]).upper()\
            + "_H"

            if params["filetype"] == "h":
                printstr += "\n\n#include <stdio.h>\n#include <stdlib.h>\n"
            else:
                printstr += "\n\n#include <iostream>\n#include <string>\n"

        # Adds some standard includes for c and c++
        elif params["filetype"] == "c":
            printstr += "\n#include <stdio.h>\n#include <stdlib.h>\n"
        elif params["filetype"] == "p":
            printstr += "\n#include <iostream>\n#include <string>\n\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::string;\n"

    printstr += space(params["rows_between_headers"])\
    + cbegin(params)\
    + cbreak(params, line({"line": "Global Declarations", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])

    if params["filetype"] in ["c", "p", "h", "x", "j"]:
        printstr += cbegin(params)\
        + cbreak(params, line({"line": "Classes", "length": params["length"], "quiet_char": params["quiet_char"]}))\
        + cend(params) + space(params["rows_between_headers"])

    # Adds main execution if not a header file
    if params["filetype"] in ["c", "p", "j"]:
        printstr += cbegin(params)\
        + cbreak(params, line({"line": "Main Execution", "length": params["length"], "quiet_char": params["quiet_char"]}))\
        + cend(params)

        if params["display_code"]:
            if params["filetype"] in ["c", "p"]:
                printstr += "\nint main(int argc, char *argv[]) {"\
                + space(params["rows_between_headers"])\
                + "\n}\n\n"
            else:
                printstr += "\npublic static void main (String [] args) {"\
                + space(params["rows_between_headers"])\
                + "\n}\n\n"
        else:
            printstr += space(params["rows_between_headers"])

        printstr += cbegin(params)\
        + cbreak(params, line({"line": "Functions", "length": params["length"], "quiet_char": params["quiet_char"]}))\
        + cend(params)\
        + space(params["rows_between_headers"])
    elif params["display_code"] and params["filetype"] in ["h", "x"]:
        printstr += "\n#endif\n\n"
    else:
        printstr += cbegin(params)\
        + cbreak(params, line({"line": "Functions", "length": params["length"], "quiet_char": params["quiet_char"]}))\
        + cend(params)\
        + space(params["rows_between_headers"])

    if params["display_watermark"]:
        printstr += "/*"\
        + line({"line": "File generated by Crepe", "length": params["length"], "quiet_char": params["quiet_char"]})\
        + "*/\n"

    return(printstr)

def html(params):
    initLength(params)

    if params["overwrite_decoration"]:
        params["loud_char"] = params["quiet_char"]
    else:
        params["loud_char"] = "-"

    if not params["quiet_decoration"]:
        params["quiet_char"] = " "

    printstr = ""

    # Adds initial block
    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += htmlbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += htmlbar(params)\
    + htmlbreak(params, line({"line": params["filename"], "length": params["length"], "quiet_char": " "})) \
    + htmlbreak(params, blank(params))\
    + htmlbreak(params, line({"line": params["name"], "length": params["length"], "quiet_char": " "}))\
    + htmlbreak(params, line({"line": params["datestring"], "length": params["length"], "quiet_char": " "}))

    # Will only add the current time if the option is selected
    if (params["display_time"]):
        printstr += htmlbreak(params, line({"line": params["timestring"], "length": params["length"], "quiet_char": " "}))

    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += htmlbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += htmlbar(params)\
    + '\n<!doctype html>\n<html lang="en">\n\n\n' + htmlbar(params)\
    + htmlbreak(params, line({"line": "Head", "length": params["length"], "quiet_char": params["quiet_char"]})) \
    + htmlbar(params) + '\n<head>\n'

    if params["display_code"]:
        printstr += '\t<meta charset="utf-8">\n\n\t<meta name="author" content="' + params["name"] + '">\n\t<meta name="description" content="' + params["name"] + '\'s ' + params["filename"].rsplit('.', 1)[0] + ' site">\n\n\t<title>' + params["filename"].rsplit('.', 1)[0] + '</title>\n\n\t<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">\n\t<link href="./favicon.png" rel="icon">\n'

    printstr += space(params["rows_between_headers"])\
    + '</head>\n\n'\
    + htmlbar(params)\
    + htmlbreak(params, line({"line": "Body", "length": params["length"], "quiet_char": params["quiet_char"]})) \
    + htmlbar(params)\
    + '\n<body>\n'\
    + space(params["rows_between_headers"])\
    + htmlbar(params)\
    + htmlbreak(params, line({"line": "Scripts", "length": params["length"], "quiet_char": params["quiet_char"]})) \
    + htmlbar(params)\
    + space(params["rows_between_headers"])\
    + '</body>\n</html>\n\n'

    if params["display_watermark"]:
        printstr += "<!--"\
        + line({"line": "File generated by Crepe", "length": params["length"], "quiet_char": params["quiet_char"]})\
        + "--!>\n"

    return printstr

def js(params):

    initLength(params)

    if params["overwrite_decoration"]:
        params["loud_char"] = params["quiet_char"]
    else:
        params["loud_char"] = "*"

    if not params["quiet_decoration"]:
        params["quiet_char"] = " "

    printstr = ""

    # Adds initial block
    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += cbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += cbegin(params)\
    + cbreak(params, line({"line": params["filename"], "length": params["length"], "quiet_char": " "}))\
    + cbreak(params, blank(params))\
    + cbreak(params, line({"line": params["name"], "length": params["length"], "quiet_char": " "}))\
    + cbreak(params, line({"line": params["datestring"], "length": params["length"], "quiet_char": " "}))

    # Will only add the current time if the option is selected
    if (params["display_time"]):
        printstr += cbreak(params, line({"line": params["timestring"], "length": params["length"], "quiet_char": " "}))

    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += cbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += cend(params)\
    + "\n\n"

    # Begins following blocks
    printstr += cbegin(params)\
    + cbreak(params, line({"line": "Preprocessor Directives", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])\
    + cbegin(params)\
    + cbreak(params, line({"line": "Global Declarations", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])

    if params["extension"] == 'ts':
        printstr += cbegin(params)\
        + cbreak(params, line({"line": "Classes", "length": params["length"], "quiet_char": params["quiet_char"]}))\
        + cend(params)\
        + space(params["rows_between_headers"])

    printstr += cbegin(params)\
    + cbreak(params, line({"line": "Functions", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])\
    + cbegin(params)\
    + cbreak(params, line({"line": "Main Execution", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])

    if params["display_watermark"]:
        printstr += "/*"\
        + line({"line": "File generated by Crepe", "length": params["length"], "quiet_char": params["quiet_char"]})\
        + "*/\n"

    return(printstr)

def java(params):

    initLength(params)

    if params["overwrite_decoration"]:
        params["loud_char"] = params["quiet_char"]
    else:
        params["loud_char"] = "*"

    if not params["quiet_decoration"]:
        params["quiet_char"] = " "

    printstr = ""

    # Adds initial block
    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += cbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += cbegin(params)\
    + cbreak(params, line({"line": params["filename"], "length": params["length"], "quiet_char": " "}))\
    + cbreak(params, blank(params))\
    + cbreak(params, line({"line": params["name"], "length": params["length"], "quiet_char": " "}))\
    + cbreak(params, line({"line": params["datestring"], "length": params["length"], "quiet_char": " "}))

    # Will only add the current time if the option is selected
    if (params["display_time"]):
        printstr += cbreak(params, line({"line": params["timestring"], "length": params["length"], "quiet_char": " "}))

    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += cbreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += cend(params)\
    + "\n\n"

    # Begins following blocks
    printstr += cbegin(params)\
    + cbreak(params, line({"line": "Preprocessor Directives", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])\
    + cbegin(params)\
    + cbreak(params, line({"line": "Declarations", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)

    if params["display_code"]:
        printstr += '\npublic class ' + params["filename"].rsplit('.', 1)[0] + ' {\n'

    printstr += space(params["rows_between_headers"])
    printstr += cbegin(params)\
    + cbreak(params, line({"line": "Functions", "length": params["length"], "quiet_char": params["quiet_char"]}))\
    + cend(params)\
    + space(params["rows_between_headers"])
    if params["filename"].rsplit('.', 1)[0].lower() == 'main':
        printstr += cbegin(params)\
        + cbreak(params, line({"line": "Main Execution", "length": params["length"], "quiet_char": params["quiet_char"]}))\
        + cend(params)

    if params["display_code"]:
        if params["filename"].rsplit('.', 1)[0].lower() == 'main':
            printstr += '\n\tpublic static voice main(String[] args) {\n'

    if params["filename"].rsplit('.', 1)[0].lower() == 'main':
        printstr += space(params["rows_between_headers"])


    if params["display_code"]:
        if params["filename"].rsplit('.', 1)[0].lower() == 'main':
            printstr += '\t}\n'
        printstr += '}\n'

    if params["display_watermark"]:
        printstr += "/*"\
        + line({"line": "File generated by Crepe", "length": params["length"], "quiet_char": params["quiet_char"]})\
        + "*/\n"

    return(printstr)

def sh(params):
    initLength(params)

    if params["overwrite_decoration"]:
        params["loud_char"] = params["quiet_char"]
    else:
        params["loud_char"] = "#"

    if not params["quiet_decoration"]:
        params["quiet_char"] = " "

    printstr = "#!/usr/bin/env sh\n\n"

    # Adds initial block
    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += pybreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += pybar(params)\
    + pybreak(params, line({"line": params["filename"], "length": params["length"], "quiet_char": " "}))\
    + pybreak(params, blank(params))\
    + pybreak(params, line({"line": params["name"], "length": params["length"], "quiet_char": " "}))\
    + pybreak(params, line({"line": params["datestring"], "length": params["length"], "quiet_char": " "}))

    # Will only add the current time if the option is selected
    if (params["display_time"]):
        printstr += pybreak(params, line({"line": params["timestring"], "length": params["length"], "quiet_char": " "}))

    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += pybreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += pybar(params)\
    + space(params["rows_between_headers"])

    if params["display_watermark"]:
        printstr += "#"\
        + line({"line": "File generated by Crepe", "length": params["length"], "quiet_char": params["quiet_char"]})\
        + "#\n"

    return printstr

def py(params):
    initLength(params)

    if params["overwrite_decoration"]:
        params["loud_char"] = params["quiet_char"]
    else:
        params["loud_char"] = "#"

    if not params["quiet_decoration"]:
        params["quiet_char"] = " "

    printstr = "#!/usr/bin/env python3\n\n"

    # Adds initial block
    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += pybreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += pybar(params)\
    + pybreak(params, line({"line": params["filename"], "length": params["length"], "quiet_char": " "}))\
    + pybreak(params, blank(params))\
    + pybreak(params, line({"line": params["name"], "length": params["length"], "quiet_char": " "}))\
    + pybreak(params, line({"line": params["datestring"], "length": params["length"], "quiet_char": " "}))

    # Will only add the current time if the option is selected
    if (params["display_time"]):
        printstr += pybreak(params, line({"line": params["timestring"], "length": params["length"], "quiet_char": " "}))

    if params["quiet_decoration"] and params["quiet_char"] != " ":
        printstr += pybreak(params, line({"line": "", "length": params["length"], "quiet_char": params["quiet_char"]}))

    printstr += pybar(params)\
    + '\n\n'\
    + pybar(params)\
    + pybreak(params, line({"line": "Preprocessor Directives", "length": params["length"], "quiet_char": params["quiet_char"]})) \
    + pybar(params)\
    + space(params["rows_between_headers"])\
    + pybar(params)\
    + pybreak(params, line({"line": "Functions", "length": params["length"], "quiet_char": params["quiet_char"]})) \
    + pybar(params)\
    + space(params["rows_between_headers"])\
    + pybar(params)\
    + pybreak(params, line({"line": "Main Execution", "length": params["length"], "quiet_char": params["quiet_char"]})) \
    + pybar(params)

    if params["display_code"]:
        printstr += '\ndef main():\n'

    printstr += space(params["rows_between_headers"])

    if params["display_code"]:
        printstr += 'if __name__ == \'__main__\':\n\tmain()\n\n'

    if params["display_watermark"]:
        printstr += "#"\
        + line({"line": "File generated by Crepe", "length": params["length"], "quiet_char": params["quiet_char"]})\
        + "#\n"

    return printstr


def htmlbar(params):
    if params["quiet_decoration"]:
        return ""
    else:
        return "<!--" \
        + filler(params["length"], " " + params["loud_char"])\
        +" --!>\n"

def htmlbreak(params, printstr):
    return "<!--"\
    + printstr\
    + "--!>\n"

def pad(blanklength, padchar):
    printstr = ""
    for x in range(int((blanklength) / 2)):
        printstr += padchar
    return printstr

def pybar(params):
    if params["quiet_decoration"]:
        return ""
    else:
        return "#" \
        + filler(params["length"], " " + params["loud_char"])\
        +" " + params["loud_char"] + "\n"

def pybreak(params, printstr):
    if params["quiet_decoration"]:
        return "#"\
        + printstr\
        + params["loud_char"] + "\n"
    else:
        return "#"\
        + printstr\
        + params["loud_char"]\
        + " \n"

def line(line_params):
    line_length = len(line_params["line"])
    printstr = pad(line_params["length"] - line_length, line_params["quiet_char"])\
    + line_params["line"]\
    + pad(line_params["length"] - line_length, line_params["quiet_char"])
    if (line_length % 2 == 0):
        printstr = printstr[:-1]
    return printstr

def filler(length, filler_string):
    printstr = ""
    for x in range((length - 2) // 2):
        printstr += filler_string
    return printstr

def cbegin(params):
    if params["quiet_decoration"]:
        return ""
    else:
        return "/*" \
        + filler(params["length"], " " + params["loud_char"])\
        +" *\\\n"

def cend(params):
    if params["quiet_decoration"]:
        return ""
    else:
        return "\\*" \
        + filler(params["length"], " " + params["loud_char"])\
        + " */\n"

def blank(params):
    printstr = ""
    for x in range(params["length"] - 1):
        printstr += " "
    return printstr

def cbreak(params, printstr):
    if params["quiet_decoration"]:
        return "/*"\
        + printstr\
        + "*/\n"
    else:
        return " "\
        + params["loud_char"]\
        + printstr\
        + params["loud_char"]\
        + " \n"

def space(blank):
    printstr = ""
    for x in range(blank):
        printstr += "\n"
    return printstr

def initLength(params):
    params["length"] = max([len(params["name"]) + 4, params["length"], len(params["datestring"]) + 4, len(params["filename"]) + 4, len(params["timestring"]) + 4, 28])

    if (params["length"] % 2 == 1):
        params["length"] = params["length"] + 1

def load(config, params):
    for item in ["length", "display_time", "display_24_hour_clock", \
                 "display_seconds", "display_watermark", "abbreviated_date", \
                 "day_before_month", "display_verbose_date", \
                 "rows_between_headers", "debug", "display_code", "quiet_decoration",
                 "overwrite_decoration"]:
        params[item] = int(config.get("DEFAULT", item))
    for item in ["name", "quiet_char"]:
        params[item] = config.get("DEFAULT", item)
    return params

#          Main Execution         #
def main():
    parser = argparse.ArgumentParser(description="Crepe", epilog="Allows creation of file skeletons for various popular file types.")
    parser.add_argument("-n", "--name", action="store", help="Sets your name.")
    parser.add_argument("-l", "--length", action="store", help="Sets length of headers. DEFAULT = 40")
    parser.add_argument("-b", "--blank-size", action="store", dest="rows_between_headers", help="Sets number of blank rows between headers. DEFAULT = 5")
    parser.add_argument("-u", "--quiet-char", action="store", dest="quiet_char", help="Sets the decorating character for quiet decoration.  One char required. DEFAULT = '-'")

    parser.add_argument("-s", "--save", action="store_true", help="Saves all specified preferences.")

    parser.add_argument("-a", "--abbreviated-date", dest="abbreviated_date", action="store_true", help="Toggles abbreviations for day, month, year. DEFAULT = false")
    parser.add_argument("-c", "--code", dest="display_code", action="store_true", help="Toggles template code within headers. DEFAULT = true")
    parser.add_argument("-f", "--format-date", dest="day_before_month", action="store_true", help="Toggles between day/month/year and month/day/year. DEFAULT = false (month/day/year)")
    parser.add_argument("-m", "--24-hour", dest="display_24_hour_clock", action="store_true", help="Toggles 24-hour time. DEFAULT = false")
    parser.add_argument("-o", "--overwrite-decoration", dest="overwrite_decoration", action="store_true", help="Overwrites default decoration char with quiet char. DEFAULT = false")
    parser.add_argument("-p", "--precise-time", dest="display_seconds", action="store_true", help="Toggles precise time. DEFAULT = false")
    parser.add_argument("-q", "--quiet-decoration", dest="quiet_decoration", action="store_true", help="Toggles a simpler decoration style. DEFAULT = false")
    parser.add_argument("-t", "--time-toggle", dest="display_time", action="store_true", help="Toggles display of time of day created. DEFAULT = true (ON)")
    parser.add_argument("-v", "--verbose-date", dest="display_verbose_date", action="store_true", help="Toggles between numerical date and verbose date. DEFAULT = true (verbose date)")
    parser.add_argument("-w", "--watermark", dest="display_watermark", action="store_true", help="Toggles watermark. DEFAULT = false")

    parser.add_argument("-d", "--debug", dest="debug", action="store_true", help="Prints instead of storing in a file. DEFAULT = false")

    parser.add_argument("filename", type=str, nargs="?", help="The file to create", default="")

    args = parser.parse_args()
    params = {}
    config = configparser.ConfigParser()
    homedir = os.path.expanduser("~")
    now = datetime.datetime.now()
    langs = {"c": c, "p": c, "h": c, "x": c, "y": py, "s": js, "j": java, \
             "t": html, "b": sh}
    file_format = {"c": ["C", "c"], "cpp": ["C++", "p"], "cxx": ["C++", "p"], \
                   "cc": ["C++", "p"], "c++": ["C++", "p"], "h": ["C header", "h"], \
                   "hh": ["C++ header", "x"], "hxx": ["C++ header", "x"], \
                   "hpp": ["C++ header", "x"], "h++": ["C++ header", "x"], \
                   "py": ["Python", "y"], "py3": ["Python", "y"], \
                   "pyw": ["Python", "y"], "pyt": ["Python", "y"], \
                   "js": ["JavaScript", "s"], "ls": ["LiveScript", "s"], \
                   "ts": ["TypeScript", "s"], "es": ["ES Script", "s"], \
                   "sjs": ["Stratified JavaScript", "s"], \
                   "cs": ["CoffeeScript", "s"], "coffee": ["CoffeeScript", "s"], \
                   "iced": ["IcedCoffeeScript", "s"], "jsp": ["JavaScript", "s"], \
                   "java": ["Java", "j"], "html": ["HTML", "t"], "sh": ["Shell", "b"]}

    if not args.save and not args.filename:
        parser.error("Either --save must be specified or filename must be given")

    if (os.path.exists(homedir + "/.crepe.config")):
        config.read(homedir + "/.crepe.config")
        params = load(config, params)
    else:
        params = {"name": "", "length": 40, "display_time": 1, \
                  "display_24_hour_clock": 0, "display_seconds": 0, \
                  "display_watermark": 0, "abbreviated_date": 0, \
                  "day_before_month": 0, "display_verbose_date": 1, \
                  "rows_between_headers": 5, "display_code": 1, \
                  "quiet_decoration": 0, "quiet_char": "-", \
                  "overwrite_decoration": 0, \
                  "debug": 0}

    if args.name:
        if len(args.name) < 151:
            params["name"] = args.name.rstrip()
        else:
            print("Name must be between 0 and 150 characters.")

    while not params["name"]:
        print("What is your name?")
        args.name = sys.stdin.readline()
        if len(args.name) < 151:
            params["name"] = args.name.rstrip()
        else:
            print("Name must be between 0 and 150 characters.")

    if args.length:
        try:
            args.length = int(args.length.rstrip())
            if args.length > 0 and args.length < 155:
                params["length"] = args.length
            else:
                print("Length must be between 1 and 154.")
        except:
            print("Length must be an integer.")

    if args.rows_between_headers:
        try:
            args.rows_between_headers = int(args.rows_between_headers.rstrip())
            if args.rows_between_headers > 0 and args.rows_between_headers < 26:
                params["rows_between_headers"] = args.rows_between_headers
            else:
                print("Blank size must be between 1 and 25.")
        except:
            print("Blank size must be an integer.")

    if args.quiet_char:
        try:
            params["quiet_char"] = args.quiet_char[0]
        except:
            print("Failed to update quiet char.")

    for arg, item in [args.display_time, "display_time"], \
    [args.display_24_hour_clock, "display_24_hour_clock"], \
    [args.display_seconds, "display_seconds"], \
    [args.display_watermark, "display_watermark"], \
    [args.abbreviated_date, "abbreviated_date"], \
    [args.day_before_month, "day_before_month"], \
    [args.display_verbose_date, "display_verbose_date"], \
    [args.display_code, "display_code"], \
    [args.debug, "debug"], \
    [args.quiet_decoration, "quiet_decoration"], \
    [args.overwrite_decoration, "overwrite_decoration"]:
        if arg:
            params[item] = abs(params[item] - 1)

    if args.save or not os.path.exists(homedir + "/.crepe.config"):
        config["DEFAULT"] = params
        with open(homedir + "/.crepe.config", "w+") as file:
            config.write(file)
        print("Preferences updated.")

    if args.filename:
        params["filename"] = args.filename
    else:
        sys.exit()

    params["datestring"] = {
        0: lambda : now.strftime("%m/%d/%y"),
        1: lambda : now.strftime("%d/%m/%y"),
        2: lambda : now.strftime("%A, %B %d, %Y"),
        3: lambda : now.strftime("%A %d %B, %Y"),
        4: lambda : now.strftime("%m/%d/%y"),
        5: lambda : now.strftime("%d/%m/%y"),
        6: lambda : now.strftime("%a, %b %d, %Y"),
        7: lambda : now.strftime("%a %d %b, %Y"),
    }[params["day_before_month"] + params["display_verbose_date"] * 2 + params["abbreviated_date"] * 4]()

    if params["display_time"]:
        params["timestring"] = {
            0: lambda : now.strftime("%I:%M %p"),
            1: lambda : now.strftime("%I:%M:%S %p"),
            2: lambda : now.strftime("%H:%M"),
            3: lambda : now.strftime("%H:%M:%S"),
        }[params["display_seconds"] + params["display_24_hour_clock"] * 2]()
    else:
        params["timestring"] = ""

    if (os.path.exists("./"+params["filename"])):
        print("{} already exists.".format(params["filename"]))
        sys.exit()

    try:
        params["extension"] = params["filename"].split(".")[-1]
        params["filetype"] = file_format[params["extension"].lower()][1]
        file_skeleton = langs[params["filetype"]](params)
        try:
            if not params["debug"]:
                with open("./"+params["filename"], "w+") as file:
                    file.write(file_skeleton)
            else:
                print(file_skeleton)
            print("Successfully created {} in {} format.".format(params["filename"], file_format[params["extension"].lower()][0]))
        except Exception as e:
            if params["debug"]:
                print(e)
            print("Unable to create {}.".format(params["filename"]))

    except Exception as e:
        if params["debug"]:
            print(e)
        print("Unknown file extension: .{}".format(params["extension"]))
        sys.exit()

if __name__ == "__main__":
    main()

#     File generated by Crepe     #
