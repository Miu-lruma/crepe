#!/usr/bin/env python3

import argparse
import configparser
import os.path
import sys
import datetime

#TODO: Add js, py, html, sh, java, shebangs
#TODO: Python version with path?

def c(params):
    printstr = ""
    if (params["length"] % 2 == 1):
        params["length"] = params["length"] + 1

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], params["filename"]))
    printstr = printstr + cbreak(cblank(params["length"]))
    printstr = printstr + cbreak(cline(params["length"], params["name"]))
    printstr = printstr + cbreak(cline(params["length"], params["datestring"]))
    if (params["toggletime"]):
        printstr = printstr + cbreak(cline(params["length"], params["timestring"]))
    printstr = printstr + cend(params["length"]) + "\n\n"

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Preprocessor Directives"))
    printstr = printstr + cend(params["length"])

    if params["code"]:
        if params["filename"].split('.')[-1].lower() == "c":
            printstr = printstr + "\n#include <stdio.h>\n#include <stdlib.h>\n"
        else:
            printstr = printstr + "\n#include <iostream>\n#include <string>\n\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::string;\n"
    printstr = printstr + space(params["blank"])

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Global Declarations"))
    printstr = printstr + cend(params["length"]) + space(params["blank"])

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Classes"))
    printstr = printstr + cend(params["length"]) + space(params["blank"])

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Main Execution"))
    printstr = printstr + cend(params["length"])

    if params["code"]:
        printstr = printstr + "\nint main(int argc, char *argv[]) {" + space(params["blank"]) + "}\n\n"
    else:
        printstr = printstr + space(params["blank"])

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Functions"))
    printstr = printstr + cend(params["length"]) + space(params["blank"])

    if params["watermark"]:
        printstr = printstr + "/*" + cline(params["length"], "File generated by Crepe") + "*/ \n"

    return(printstr)

def h(params):
    printstr = ""
    if (params["length"] % 2 == 1):
        params["length"] = params["length"] + 1

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], params["filename"]))
    printstr = printstr + cbreak(cblank(params["length"]))
    printstr = printstr + cbreak(cline(params["length"], params["name"]))
    printstr = printstr + cbreak(cline(params["length"], params["datestring"]))
    if (params["toggletime"]):
        printstr = printstr + cbreak(cline(params["length"], params["timestring"]))
    printstr = printstr + cend(params["length"]) + "\n\n"

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Preprocessor Directives"))
    printstr = printstr + cend(params["length"])
    if (params["code"]):
        printstr = printstr + "\n#ifndef " + "_".join(params["filename"].rsplit('.')[:-1]).upper() + "_H\n#define " + "_".join(params["filename"].rsplit('.')[:-1]).upper() + "_H"

        if params["filename"].split('.')[-1].lower() == "h":
            printstr = printstr + "\n\n#include <stdio.h>\n#include <stdlib.h>\n"
        else:
            printstr = printstr + "\n\n#include <iostream>\n#include <string>\n"
    printstr = printstr + space(params["blank"])

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Global Declarations"))
    printstr = printstr + cend(params["length"]) + space(params["blank"])

    printstr = printstr + cbegin(params["length"])
    printstr = printstr + cbreak(cline(params["length"], "Classes"))
    printstr = printstr + cend(params["length"]) + space(params["blank"])

    if (params["code"]):
        printstr = printstr + "\n#endif\n"
    if params["watermark"]:
        printstr = printstr + "/*" + cline(params["length"], "File generated by Crepe") + "*/ \n"
    return printstr

def html(params):
    pass

def sh(params):
    pass

def js(params):
    pass

def java(params):
    pass

def py(params):
    pass

def pad(blanklength):
    printstr = ""
    for x in range(int((blanklength) / 2)):
        printstr = printstr + " "
    return printstr

def cline(length, line):
    templen = len(line)
    printstr = pad(length - templen) + line + pad(length - templen)
    if (templen % 2 == 0):
        printstr = printstr[:-1]
    return printstr

def cbegin(length):
    printstr = "/*"
    for x in range((length - 2) // 2):
        printstr = printstr + " *"
    printstr = printstr + " *\\\n"
    return printstr

def cend(length):
    printstr = "\\*"
    for x in range((length - 2) // 2):
        printstr = printstr + " *"
    printstr = printstr + " */\n"
    return printstr

def cblank(length):
    printstr = ""
    for x in range(length - 1):
        printstr = printstr + " "
    return printstr

def cbreak(printstr):
    return " *" + printstr + "* \n"

def space(blank):
    printstr = ""
    for x in range(blank):
        printstr = printstr + "\n"
    return printstr

def load(config):
    for item in ["length", "toggletime", "toggle24", "toggleprecise", "watermark", "abb", "dateformat", "verbosedate", "blank", "code"]:
        params[item] = int(config.get('DEFAULT', item))
    params["name"] = config.get('DEFAULT', 'name')
    return params

def save(config, params):
        config['DEFAULT'] = params
        with open(homedir + '/.crepe.config', 'w+') as file:
            config.write(file)
        print("Preferences updated.")

parser = argparse.ArgumentParser(description="Crepe v 1", epilog="Allows creation of file skeletons for various popular file types.")
parser.add_argument("-n", "--name", action="store", help="Sets your name.")
parser.add_argument("-l", "--length", action="store", help="Sets length of headers. DEFAULT = 40")
parser.add_argument("-b", "--blank-size", action="store", dest="blank", help="Sets number of blank rows between headers. DEFAULT = 5")

parser.add_argument("-t", "--time-toggle", dest="toggletime", action="store_true", help="Toggles display of time of day created. DEFAULT = true (ON)")
parser.add_argument("-m", "--24-hour", dest="toggle24", action="store_true", help="Toggles 24-hour time. DEFAULT = false")
parser.add_argument("-p", "--precise-time", dest="toggleprecise", action="store_true", help="Toggles precise time. DEFAULT = false")
parser.add_argument("-w", "--watermark", dest="watermark", action="store_true", help="Toggles watermark. DEFAULT = false")
parser.add_argument("-c", "--code", dest="code", action="store_true", help="Toggles template code within headers. DEFAULT = true")
parser.add_argument("-a", "--abbreviated-date", dest="abb", action="store_true", help="Toggles abbreviations for day, month, year. DEFAULT = false")
parser.add_argument("-f", "--format-date", dest="dateformat", action="store_true", help="Toggles between day/month/year and month/day/year. DEFAULT = false (month/day/year)")
parser.add_argument("-v", "--verbose-date", dest="verbosedate", action="store_true", help="Toggles between numerical date and verbose date. DEFAULT = true (verbose date)")
parser.add_argument("-s", "--save", action="store_true", help="Saves all specified preferences.")

parser.add_argument("filename", type=str, nargs='?', help="The file to create", default='')

args = parser.parse_args()
params = {}
config = configparser.ConfigParser()
homedir = os.path.expanduser("~")
now = datetime.datetime.now()
langs = {"c": c, "cpp": c, "cxx": c, "cc": c, "c++": c, "h": h, "hh": h, "hxx": h, "hpp": h, "h++": h, "py": py, "py3": py, "pyw": py, "pyt": py, "js": js, "ls": js, "ts": js, "es": js, "sjs": js, "cs": js, "coffee": js, "iced": js, "jsp": js, "java": java, "html": html, "sh": sh}

if not args.save and not args.filename:
    parser.error("Either --save must be specified or filename must be given")

if (os.path.exists(homedir + '/.crepe.config')):
    config.read(homedir + '/.crepe.config')
    params = load(config)
else:
    params = {"name": "", "length": 40, "toggletime": 1, "toggle24": 0, "toggleprecise": 0, "watermark": 0, "abb": 0, "dateformat": 0, "verbosedate": 1, "blank": 5, "code": 1}

if args.name:
    if len(args.name) < 151:
        params["name"] = args.name.rstrip()
    else:
        print("Name must be between 0 and 150 characters.")

while not params["name"]:
    print("What is your name?")
    args.name = sys.stdin.readline()
    if len(args.name) < 151:
        params["name"] = args.name.rstrip()
    else:
        print("Name must be between 0 and 150 characters.")

if args.length:
    try:
        args.length = int(args.length.rstrip())
        if args.length > 0 and args.length < 155:
            params["length"] = args.length
        else:
            print("Length must be between 1 and 154.")
    except:
        print("Length must be an integer.")

if args.blank:
    try:
        args.blank = int(args.blank.rstrip())
        if args.blank > 0 and args.blank < 26:
            params["blank"] = args.blank
        else:
            print("Blank size must be between 1 and 25.")
    except:
        print("Blank size must be an integer.")

for arg, item in [args.toggletime, "toggletime"], [args.toggle24, "toggle24"], [args.toggleprecise, "toggleprecise"], [args.watermark, "watermark"], [args.abb, "abb"], [args.dateformat, "dateformat"], [args.verbosedate, "verbosedate"], [args.code, "code"]:
    if arg:
        params[item] = abs(params[item] - 1)

if args.save or not os.path.exists(homedir + '/.crepe.config'):
    save(config, params)

if args.filename:
    params["filename"] = args.filename
else:
    sys.exit()

params["datestring"] = {
    0: lambda : now.strftime("%m/%d/%y"),
    1: lambda : now.strftime("%d/%m/%y"),
    2: lambda : now.strftime("%A, %B %d, %Y"),
    3: lambda : now.strftime("%A %d %B, %Y"),
    4: lambda : now.strftime("%m/%d/%y"),
    5: lambda : now.strftime("%d/%m/%y"),
    6: lambda : now.strftime("%a, %b %d, %Y"),
    7: lambda : now.strftime("%a %d %b, %Y"),
}[params["dateformat"] + params["verbosedate"] * 2 + params["abb"] * 4]()

if params["toggletime"]:
    params["timestring"] = {
        0: lambda : now.strftime("%I:%M %p"),
        1: lambda : now.strftime("%I:%M:%S %p"),
        2: lambda : now.strftime("%H:%M"),
        3: lambda : now.strftime("%H:%M:%S"),
    }[params["toggleprecise"] + params["toggle24"] * 2]()
else:
    params["timestring"] = ""

params["length"] = max([len(params["name"]) + 4, params["length"], len(params["datestring"]) + 4, len(params["filename"]) + 4, len(params["timestring"]) + 4, 28])

if (os.path.exists("./"+params["filename"])):
    print("{} already exists.".format(params["filename"]))
    sys.exit()

try:
    print(langs[params["filename"].split('.')[-1].lower()](params))
except:
    print("Unknown file extension: .{}".format(params["filename"].split('.')[-1]))
